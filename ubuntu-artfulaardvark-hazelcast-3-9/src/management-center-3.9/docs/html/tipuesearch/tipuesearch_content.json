{"pages":[{"title":"Hazelcast Management Center Manual","text":"Welcome to the Hazelcast IMDG Management Center Manual. This manual includes information on how to use Hazelcast Management Center. Hazelcast Management Center enables you to monitor and manage your cluster members running Hazelcast. In addition to monitoring the overall state of your clusters, you can also analyze and browse your data structures in detail, update map configurations and take thread dumps from members. You can run scripts (JavaScript, Groovy, etc.) and commands on your members with its scripting and console modules.","tags":"","url":"index.html"},{"title":"Deploying and Starting","text":"You have two options to start Hazelcast Management Center: Deploy the file mancenter-version.war on your Java application server\/container. Start Hazelcast Management Center from the command line and then have the Hazelcast cluster members communicate with it. This means that your members should know the URL of the mancenter application before they start. Starting with WAR File Here are the steps. Download the latest Hazelcast ZIP from hazelcast.org. The ZIP contains the mancenter-version.war file under the directory mancenter. You can directly start mancenter-version.war file from the command line. The following command will start Hazelcast Management Center on port 8080 with context root 'mancenter' (http:\/\/localhost:8080\/mancenter). java -jar mancenter-*version*.war 8080 mancenter Enabling TLS\/SSL when starting with WAR file When you start Management Center from the command line, it will serve the pages unencrypted by using &quot;http&quot;, by default. To enable TLS\/SSL, use the following command line parameters when starting the Management Center: -Dhazelcast.mc.tls.enabled=true (default is false) -Dhazelcast.mc.tls.keyStore=path to your keyStore -Dhazelcast.mc.tls.keyStorePassword=password for your keyStore -Dhazelcast.mc.tls.trustStore=path to your trustStore -Dhazelcast.mc.tls.trustStorePassword=password for your trustStore You can leave trust store and trust store password values empty to use the system JVM's own trust store. Following is an example on how to start Management Center with TLS\/SSL enabled from the command line: java -Dhazelcast.mc.tls.enabled=true -Dhazelcast.mc.tls.keyStore=\/some\/dir\/selfsigned.jks -Dhazelcast.mc.tls.keyStorePassword=yourpassword -jar mancenter-3.8.2.war You can access Management Center from the following HTTPS URL on port 8443: https:\/\/localhost:8443\/mancenter To override the HTTPS port, you can give it as the second argument when starting Management Center. For example: java -Dhazelcast.mc.tls.enabled=true -Dhazelcast.mc.tls.keyStore=\/dir\/to\/certificate.jks -Dhazelcast.mc.tls.keyStorePassword=yourpassword -jar mancenter-3.8.2.war 80 443 mancenter This will start Management Center on HTTP port 80 and HTTPS port 443 with context path \/mancenter. Note that accessing port 80 with an http:\/\/ prefix will redirect the users to an https:\/\/ URL on port 443. It means that the users will use HTTPS regardless of the version of the URL they use. Mutual authentication Mutual authentication allows cluster members to have their keyStores and Management Center to have their trustStores so that Management Center can know which members it can trust. To enable mutual authentication, you need to use the following command line parameters when starting the Management Center: -Dhazelcast.mc.tls.mutualAuthentication=REQUIRED And at member side, you need to set the following JVM arguments when starting the member: -Djavax.net.ssl.keyStore=path to your keyStore -Djavax.net.ssl.keyStorePassword=yourpassword Please see the below example snippet to see the full command to start Management Center: java -Dhazelcast.mc.tls.enabled=true -Dhazelcast.mc.tls.keyStore=path to your keyStore -Dhazelcast.mc.tls.keyStorePassword=password for your keyStore -Dhazelcast.mc.tls.trustStore=path to your trustStore -Dhazelcast.mc.tls.trustStorePassword=password for your trustStore -Dhazelcast.mc.tls.mutualAuthentication=REQUIRED -jar mancenter.war And the full command to start the cluster member: java -Djavax.net.ssl.keyStore=path to your keyStore -Djavax.net.ssl.keyStorePassword=yourpassword -Djavax.net.ssl.trustStore=path to your trustStore -Djavax.net.ssl.trustStorePassword=yourpassword -jar hazelcast.jar The parameter -Dhazelcast.mc.tls.mutualAuthentication has two options: REQUIRED: If the cluster member does not provide a keystore or the provided keys are not included in Management Center's truststore, the cluster member will not be authenticated. OPTIONAL: If the cluster member does not provide a keystore, it will be authenticated. But if the cluster member provides keys that are not included in Management Center's truststore, the cluster member will not be authenticated. Excluding Specific TLS\/SSL Protocols When you enable TLS on the Management Center, it will support the clients connecting with any of the TLS\/SSL protocols that the JVM supports by default. In order to disable specific protocols, you need to set the -Dhazelcast.mc.tls.excludeProtocols command line argument to a comma separated list of protocols to be excluded from the list of supported protocols. For example, to allow only TLSv1.2, you need to add the following command line argument when starting the Management Center: -Dhazelcast.mc.tls.excludeProtocols=SSLv3,SSLv2Hello,TLSv1,TLSv1.1 When you specify the above argument, you should see a line similar to the following in the Management Center log: 2017-06-21 12:35:54.856:INFO:oejus.SslContextFactory:Enabled Protocols [TLSv1.2] of [SSLv2Hello, SSLv3, TLSv1, TLSv1.1, TLSv1.2] Starting with an Extra Classpath You can also start the Management Center with an extra classpath entry (for example, when using JAAS authentication) by using the following command: java -cp &quot;mancenter-*version*.war:\/path\/to\/an\/extra.jar&quot; Launcher 8080 mancenter On Windows, the command becomes as follows (semicolon instead of colon): java -cp &quot;mancenter-*version*.war;\/path\/to\/an\/extra.jar&quot; Launcher 8080 mancenter Starting with Scripts Optionally, you can use the scripts startManCenter.bat or startManCenter.sh located in the directory mancenter to start the Management Center. Deploying to Application Server Or, instead of starting at the command line, you can deploy it to your application server (Tomcat, Jetty, etc.). If you have deployed mancenter-*version*.war in your already-SSL-enabled web container, configure hazelcast.xml as follows. &lt;management-center enabled=&quot;true&quot;&gt; https:\/\/localhost:sslPortNumber\/mancenter &lt;\/management-center&gt; If you are using an untrusted certificate for your container, which you created yourself, you need to add that certificate to your JVM first. Download the certificate from the browser, after this you can add it to JVM as follows. keytool -import -noprompt -trustcacerts -alias &lt;AliasName&gt; -file &lt;certificateFile&gt; -keystore $JAVA_HOME\/jre\/lib\/security\/cacerts -storepass &lt;Password&gt; Connecting Hazelcast members to Management Center After you perform the above steps, make sure that http:\/\/localhost:8080\/mancenter is up. Configure your Hazelcast members by adding the URL of your web application to your hazelcast.xml. Hazelcast members will send their states to this URL. &lt;management-center enabled=&quot;true&quot;&gt; http:\/\/localhost:8080\/mancenter &lt;\/management-center&gt; If you enabled TLS\/SSL on Management Center, then you will need to configure the members with the relevant keystore &amp; trustore. In that case you expand the above configuration as follows. &lt;management-center enabled=&quot;true&quot;&gt; &lt;url&gt;https:\/\/localhost:sslPortNumber\/mancenter&lt;\/url&gt; &lt;mutual-auth&gt; &lt;factory-class-name&gt; com.hazelcast.nio.ssl.BasicSSLContextFactory &lt;\/factory-class-name&gt; &lt;properties&gt; &lt;property name=&quot;keyStore&quot;&gt;keyStore&lt;\/property&gt; &lt;property name=&quot;keyStorePassword&quot;&gt;keyStorePassword&lt;\/property&gt; &lt;property name=&quot;protocol&quot;&gt;TLS&lt;\/property&gt; &lt;\/properties&gt; &lt;\/mutual-auth&gt; &lt;\/management-center&gt; In the example above, Hazelcast's default SSL context factory (BasicSSLContextFactory) is used; you can also provide your own implementation of this factory. Here are the descriptions for the properties: keystore: Path of your keystore file. Note that your keystore's type must be JKS. keyStorePassword: Password to access the key from your keystore file. keyManagerAlgorithm: Name of the algorithm based on which the authentication keys are provided. keyStoreType: The type of the keystore. Its default value is JKS. truststore: Path of your truststore file. The file truststore is a keystore file that contains a collection of certificates trusted by your application. Its type should be JKS. trustStorePassword: Password to unlock the truststore file. trustManagerAlgorithm: Name of the algorithm based on which the trust managers are provided. trustStoreType: The type of the truststore. Its default value is JKS. protocol: Name of the algorithm which is used in your TLS\/SSL. Its default value is TLS. Available values are: SSL SSLv2 SSLv3 TLS TLSv1 TLSv1.1 TLSv1.2 See the programmatic configuration example below: Config config = new Config(); SSLContextFactory factory = new BasicSSLContextFactory(); MCMutualAuthConfig mcMutualAuthConfig = new MCMutualAuthConfig().setEnabled(true).setFactoryImplementation(factory) .setProperty(&quot;keyStore&quot;, &quot;\/path\/to\/keyStore&quot;) .setProperty(&quot;keyStorePassword&quot;, &quot;password&quot;) .setProperty(&quot;keyManagerAlgorithm&quot;, &quot;SunX509&quot;) .setProperty(&quot;trustStore&quot;, &quot;\/path\/to\/truststore&quot;) .setProperty(&quot;trustStorePassword&quot;, &quot;password&quot;) .setProperty(&quot;trustManagerAlgorithm&quot;, &quot;SunX509&quot;); ManagementCenterConfig mcc = new ManagementCenterConfig() .setEnabled(true) .setMutualAuthConfig(mcMutualAuthConfig) .setUrl(&quot;https:\/\/localhost:8443\/mancenter&quot;); config.setManagementCenterConfig(mcc); HazelcastInstance hz = Hazelcast.newHazelcastInstance(config); NOTE: All of the above algorithms support Java 6 and higher versions, except the TLSv1.2 supports Java 7 and higher versions. For the protocol property, we recommend you to provide SSL or TLS with its version information, e.g., TLSv1.2. Note that if you write only SSL or TLS, your application will choose the SSL or TLS version according to your Java version. Now you can start your Hazelcast cluster, browse to http:\/\/localhost:8080\/mancenter or https:\/\/localhost:sslPortNumber\/mancenter (depepnding on installation) and setup your administrator account explained in the next section. Configuring Update Interval You can set a frequency (in seconds) for which Management Center will take information from the Hazelcast cluster, using the element update-interval as shown below. update-interval is optional and its default value is 3 seconds. &lt;management-center enabled=&quot;true&quot; update-interval=&quot;3&quot;&gt; http:\/\/localhost:8080\/mancenter &lt;\/management-center&gt; Configuring Logging Management Center uses Logback for its logging. By default, it uses the following configuration: &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;configuration&gt; &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt; &lt;layout class=&quot;ch.qos.logback.classic.PatternLayout&quot;&gt; &lt;Pattern&gt; %d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n &lt;\/Pattern&gt; &lt;\/layout&gt; &lt;\/appender&gt; &lt;root level=&quot;INFO&quot;&gt; &lt;appender-ref ref=&quot;STDOUT&quot;\/&gt; &lt;\/root&gt; &lt;\/configuration&gt; To change the logging configuration, you can create a custom Logback configuration file and start Management Center with the -Dlogback.configurationFile option pointing to your configuration file. For example, you can create a file named logback-custom.xml with the following content and set logging level to DEBUG. To use this file as the logging configuration, you need to start Management Center with -Dlogback.configurationFile=\/path\/to\/your\/logback-custom.xml command line parameter: &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;configuration&gt; &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt; &lt;layout class=&quot;ch.qos.logback.classic.PatternLayout&quot;&gt; &lt;Pattern&gt; %d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n &lt;\/Pattern&gt; &lt;\/layout&gt; &lt;\/appender&gt; &lt;root level=&quot;DEBUG&quot;&gt; &lt;appender-ref ref=&quot;STDOUT&quot;\/&gt; &lt;\/root&gt; &lt;\/configuration&gt;","tags":"","url":"Deploying_and_Starting.html"},{"title":"Getting Started","text":"If you have the open source edition of Hazelcast, Management Center can be used for at most 2 members in the cluster. To use it for more members, you need to have either a Management Center license, Hazelcast IMDG Enterprise license or Hazelcast IMDG Enterprise HD license. This license should be entered within the Management Center as described in the following paragraphs. NOTE: Even if you have a Hazelcast IMDG Enterprise or Enterprise HD license key and you set it as explained in the Setting the License Key section, you still need to enter this same license within the Management Center. Please see the following paragraphs to learn how you can enter your license. Once you browse to http:\/\/localhost:8080\/mancenter and since you are going to use Management Center for the first time, the following dialog box appears. NOTE: If you already configured security before, a login dialog box appears instead. It asks you to choose your security provider and create a username and password. Available security providers are Active Directory, LDAP and JAAS, which are described in the following sections. Once you press the Save button, your administrator account credentials are created and the following dialog box appears. &quot;Select Cluster to Connect&quot; dialog box lists the clusters that send statistics to Management Center. You can either select a cluster to connect using the Connect button or enter your Management Center license key using the Enter License button. Management Center can be used without a license if the cluster that you want to monitor has at most 2 members. If you have a Management Center license or Hazelcast IMDG Enterprise license, you can enter it in the dialog box that appears once you press the Enter License button, as shown below. When you try to connect to a cluster that has more than 2 members without entering a license key or if your license key is expired, the following dialog box appears. Here, you can either choose to connect to a cluster without providing a license key or to enter your license key. If you choose to continue without a license, please remember that Management Center works if your cluster has at most two members. Management Center creates a folder with the name mancenter under your user\/home folder to save data files and above settings\/license information. You can change the data folder by setting the hazelcast.mancenter.home system property. Please see the System Properties section to see the description of this property and to learn how to set a system property.","tags":"","url":"Getting_Started.html"},{"title":"Using Management Center with TLS-SSL Only","text":"To encrypt data transmitted over all channels of Management Center using TLS\/SSL, make sure you do all of the following: Deploy Management Center on a TLS\/SSL enabled container or start it from the command line with TLS\/SSL enabled. See Installing Management Center. Enable TLS\/SSL communication to Management Center for your Hazelcast cluster. See Connecting Hazelcast members to Management Center. If you're using Clustered JMX on Management center, enable TLS\/SSL for it. See Enabling TLS\/SSL for Clustered JMX. If you're using LDAP authentication, make sure you use LDAPS or enable the &quot;Start TLS&quot; field. See LDAP Authentication","tags":"","url":"Using_Management_Center_with_TLS-SSL_Only.html"},{"title":"Active Directory Authentication","text":"You can use your existing Active Directory server for authentication\/authorization on Management Center. In the &quot;Configure Security&quot; page, select Active Directory from the &quot;Security Provider&quot; combo, and the following form page appears: Provide the details in this form for your Active Directory server: URL: URL of your Active Directory server, including schema (ldap:\/\/ or ldaps:\/\/) and port. Domain: Domain of your organization on Active Directory. Admin Group Name: Members of this group will have admin privileges on the Management Center. User Group Name: Members of this group will have read and write privileges on the Management Center. Read-only User Group Name: Members of this group will have only read privilege on the Management Center. Metrics-only Group Name: Members of this group will have the privilege to see only the metrics on the Management Center. Once configured, Active Directory settings are saved in a file named ldap.properties under the mancenter folder mentioned in the previous section. If you want to update your settings afterwards, you need to update ldap.properties file and click &quot;Reload Security Config&quot; button on the login page.","tags":"","url":"Active_Directory_Authentication.html"},{"title":"JAAS Authentication","text":"You can use your own javax.security.auth.spi.LoginModule implementation for authentication\/authorization on Management Center. In the &quot;Configure Security&quot; page, select JAAS from the &quot;Security Provider&quot; combo box, and the following page appears: Provide the details in this form for your JAAS LoginModule implementation: Login Module Class: Fully qualified class name of your javax.security.auth.spi.LoginModule implementation Admin Group: Members of this group will have admin privileges on the Management Center. User Group: Members of this group will have read and write privileges on the Management Center. Read-only User Group: Members of this group will have only read privilege on the Management Center. Metrics-only Group: Members of this group will have the privilege to see only the metrics on the Management Center. Following is an example implementation. Note that we return two java.security.Principal instances; one of them is the username and the other one is a group name, which you will use when configuring JAAS security as described above. import javax.security.auth.Subject; import javax.security.auth.callback.Callback; import javax.security.auth.callback.CallbackHandler; import javax.security.auth.callback.NameCallback; import javax.security.auth.callback.PasswordCallback; import javax.security.auth.login.LoginException; import javax.security.auth.spi.LoginModule; import java.security.Principal; import java.util.Map; public class SampleLoginModule implements LoginModule { private Subject subject; private String password; private String username; @Override public void initialize(Subject subject, CallbackHandler callbackHandler, Map&lt;String, ?&gt; sharedState, Map&lt;String, ?&gt; options) { this.subject = subject; try { NameCallback nameCallback = new NameCallback(&quot;prompt&quot;); PasswordCallback passwordCallback = new PasswordCallback(&quot;prompt&quot;, false); callbackHandler.handle(new Callback[] {nameCallback, passwordCallback }); password = new String(passwordCallback.getPassword()); username = nameCallback.getName(); } catch (Exception e) { throw new RuntimeException(e); } } @Override public boolean login() throws LoginException { if (!username.equals(&quot;emre&quot;)) { throw new LoginException(&quot;Bad User&quot;); } if (!password.equals(&quot;pass1234&quot;)) { throw new LoginException(&quot;Bad Password&quot;); } subject.getPrincipals().add(new Principal() { public String getName() { return &quot;emre&quot;; } }); subject.getPrincipals().add(new Principal() { public String getName() { return &quot;MancenterAdmin&quot;; } }); return true; } @Override public boolean commit() throws LoginException { return true; } @Override public boolean abort() throws LoginException { return true; } @Override public boolean logout() throws LoginException { return true; } }","tags":"","url":"JAAS_Authentication.html"},{"title":"LDAP Authentication","text":"You can use your existing LDAP server for authentication\/authorization on Management Center. In the &quot;Configure Security&quot; page, select LDAP from the &quot;Security Provider&quot; combo box, and the following form page appears: Provide the details in this form for your LDAP server: URL: URL of your LDAP server, including schema (ldap:\/\/ or ldaps:\/\/) and port. Distinguished name (DN) of user: DN of a user that has admin privileges on the LDAP server. It is used to connect to the server when authenticating users. Search base DN: Base DN to use for searching users\/groups. Additional user DN: Appended to &quot;Search base DN&quot; and used for finding users. Additional group DN: Appended to &quot;Search base DN&quot; and used for finding groups. Admin Group Name: Members of this group will have admin privileges on the Management Center. User Group Name: Members of this group will have read and write privileges on the Management Center. Read-only User Group Name: Members of this group will have only read privilege on the Management Center. Metrics-only Group Name: Members of this group will have the privilege to see only the metrics on the Management Center. Start TLS: Enable if your LDAP server uses Start TLS. User Search Filter: LDAP search filter expression to search for users. For example, uid={0} searches for a username that matches with the uid attribute. Group Search Filter: LDAP search filter expression to search for groups. For example, uniquemember={0} searches for a group that matches with the uniquemember attribute Once configured, LDAP settings are saved in a file named ldap.properties under the mancenter folder mentioned in the previous section. If you want to update your settings afterwards, you need to update ldap.properties file and click &quot;Reload Security Config&quot; button on the login page. Password Encryption By default, the password that you use in LDAP configuration is saved on the ldap.properties file in clear text. This might pose a security risk. To store the LDAP password in encrypted form, we offer the following two options: Provide a KeyStore password: This will create and manage a Java KeyStore under the Management Center home directory. The LDAP password will be stored in this KeyStore in encrypted form. Configure an external Java KeyStore: This will use an existing Java KeyStore. This option might also be used to store the password in an HSM that provides a Java KeyStore API. When you do either, the LDAP password you enter on the initial configuration UI dialog will be stored in encrypted form in a Java KeyStore instead of the ldap.properties file. Providing a Master Key for Encryption There are two ways to provide a master key for encryption: If you deploy Management Center on an application server, you need to set MC_KEYSTORE_PASS environment variable before starting Management Center. This option is less secure. You should clear the environment variable once you make sure you can log in with your LDAP credentials to minimize the security risk. If you're starting Management Center from the command line, you can start it with -Dhazelcast.mc.askKeyStorePassword. Management Center will ask for the KeyStore password upon start and use it as a password for the KeyStore it creates. This option is more secure as it only stores the KeyStore password in the memory. By default, Management Center will create a Java KeyStore file under the Management Center home directory with the name mancenter.jceks. You can change the location of this file by using the -Dhazelcast.mc.keyStore.path=\/path\/to\/keyStore.jceks JVM argument. Configuring an External Java KeyStore If you don't want Management Center to create a KeyStore for you and use an existing one that you've created before (or an HSM), set the following JVM arguments when starting Management Center: -Dhazelcast.mc.useExistingKeyStore=true: Enables use of an existing KeyStore. -Dhazelcast.mc.existingKeyStore.path=\/path\/to\/existing\/keyStore.jceks: Path to the KeyStore. You do not have to set it if you use an HSM. -Dhazelcast.mc.existingKeyStore.pass=somepass: Password for the KeyStore. You do not have to set it if HSM provides another means to unlock HSM. -Dhazelcast.mc.existingKeyStore.type=JCEKS: Type of the KeyStore. -Dhazelcast.mc.existingKeyStore.provider=com.yourprovider.MyProvider: Provider of the KeyStore. Leave empty to use the system provider. Specify the class name of your HSM's java.security.Provider implementation if you use an HSM. NOTE: *Make sure your KeyStore supports storing SecretKeys. * Updating Encrypted Passwords You can use one of the updateLdapPassword.sh or updateLdapPassword.bat scripts to update the encrypted LDAP password stored in the KeyStore. It will ask for information about the KeyStore such as its location and password. It will then ask for the new LDAP password that you want to use. After updating the LDAP password, you'll need to click Reload Security Configuration button on the main screen.","tags":"","url":"LDAP_Authentication.html"},{"title":"User Interface Overview","text":"Once the page is loaded after selecting a cluster, the tool's home page appears as shown below. This page provides the fundamental properties of the selected cluster which are explained in the Home Page section. The page has a toolbar on the top and a menu on the left. Toolbar The toolbar has the following buttons: Scripting: Loads the page used to write and execute the user`s own scripts on the cluster. Please see the Scripting section. Console: Loads the page used to execute commands on the cluster. Please see the Console section. Alerts: Creates alerts by specifying filters. Please see the Setting Alerts section. Docs: Opens the Management Center documentation in a window inside the tool. Please see the Documentation section. Administration: Used by the admin users to manage users in the system. Please see the Administering Management Center section. Time Travel: Sees the cluster's situation at a time in the past. Please see the Time Travel section. Operations: Expands a dropdown with the following options: Cluster State: Used by the admin users to manage cluster state. Please see the Cluster State section. Hot Restart: Used by the admin users to force start or partial start the cluster. Please see the Hot Restart section. This option is visible only if you have configured your license. WAN Sync: Used by the admin users to start a WAN sync operation. This option is visible only if you have configured your license. Rolling Upgrade: Used by the admin users to change a cluster's version. This option is visible only if you have configured your license. Please see the Rolling Upgrade section. Update Cluster URL: Used to change a cluster's Management Center URL. Cluster Selector: Switches between clusters. When clicked, a drop down list of clusters appears. Logout: Closes the current user's session. The user can select any cluster and once selected, the page immediately loads with the selected cluster's information. NOTE: Some of the above listed toolbar items are not visible to users who are not admin or who have read-only permission. Also, some of the operations explained in the later sections cannot be performed by users with read-only permission. Please see the Administering Management Center section for details. Menu The Home Page includes a menu on the left which lists the distributed data structures in the cluster and all the cluster members, as shown below. NOTE: Distributed data structures will be shown there when the proxies are created for them. NOTE: WAN Replication tab is only visible with Hazelcast IMDG Enterprise license. You can expand and collapse menu items by clicking on them. Below is the list of menu items with links to their explanations. Caches Maps Replicated Maps Queues Topics MultiMaps Executors WAN Members Clients Tabbed View Each time you select an item from the toolbar or menu, the item is added to the main view as a tab, as shown below. In the above example, Home, Scripting, Console, queue1 and map1 windows can be seen as tabs. Windows can be closed using the icon on each tab (except the Home Page; it cannot be closed).","tags":"","url":"User_Interface_Overview.html"},{"title":"Home Page","text":"This is the first page appearing after logging in. It gives an overview of the connected cluster. The following subsections describe each portion of the page. CPU Utilization This part of the page provides load and utilization information for the CPUs for each cluster member, as shown below. The first column lists the members with their IPs and ports. The next columns list the system load averages on each member for the last 1, 5 and 15 minutes. These average values are calculated as the sum of the count of runnable entities running on and queued to the available CPUs averaged over the last 1, 5 and 15 minutes. This calculation is operating system specific, typically a damped time-dependent average. If system load average is not available, these columns show negative values. The last column (Chart) graphically shows the recent load on the CPUs. When you move the mouse cursor on a chart, you can see the CPU load at the time where the cursor is placed. Charts under this column shows the CPU loads approximately for the last 2 minutes. If recent CPU load is not available, you will see a negative value. Memory Utilization This part of the page provides information related to memory usages for each member, as shown below. The first column lists the members with their IPs and ports. The next columns show the used and free memories out of the total memory reserved for Hazelcast usage, in real-time. The Max column lists the maximum memory capacity of each member and the Percent column lists the percentage value of used memory out of the maximum memory. The last column (Chart) shows the memory usage of members graphically. When you move the mouse cursor on a desired graph, you can see the memory usage at the time where the cursor is placed. Graphs under this column shows the memory usages approximately for the last 2 minutes. Memory Distribution This part of the page graphically provides the cluster wise breakdown of memory, as shown below. The blue area is the memory used by maps. The dark yellow area is the memory used by both non-Hazelcast entities and all Hazelcast entities except the map (i.e. the memory used by all entities subtracted by the memory used by map). The green area is the free memory out of the whole cluster`s memory capacity. In the above example, you can see 0.32% of the total memory is used by Hazelcast maps (it can be seen by placing the mouse cursor on it), 58.75% is used by non-Hazelcast entities and 40.85% of the total memory is free. Map Memory Distribution This part is the breakdown of the blue area shown in the Memory Distribution graph explained above. It provides the percentage values of the memories used by each map, out of the total cluster memory reserved for all Hazelcast maps. In the above example, you can see 49.55% of the total map memory is used by map1 and 49.55% is used by map2. Partition Distribution This pie chart shows what percentage of partitions each cluster member has, as shown below. You can see each member's partition percentages by placing the mouse cursor on the chart. In the above example, you can see the member &quot;127.0.0.1:5708&quot; has 5.64% of the total partition count (which is 271 by default and configurable, please see the hazelcast.partition.count property explained in the System Properties section).","tags":"","url":"Home_Page.html"},{"title":"Monitoring Caches","text":"You can monitor your caches' metrics by clicking the cache name listed on the left panel under Caches menu item. A new tab for monitoring that cache instance is opened on the right, as shown below. On top of the page, four charts monitor the Gets, Puts, Removals and Evictions in real-time. The X-axis of all the charts show the current system time. To open a chart as a separate dialog, click on the button placed at the top right of each chart. Under these charts is the Cache Statistics Data Table. From left to right, this table lists the IP addresses and ports of each member, and the entry, get, put, removal, eviction, and hit and miss counts per second in real-time. You can navigate through the pages using the buttons at the bottom right of the table (First, Previous, Next, Last). You can ascend or descend the order of the listings in each column by clicking on column headings. Under the Cache Statistics Data Table, there is Cache Throughput Data Table. From left to right, this table lists: the IP address and port of each member, the put\/s, get\/s and remove\/s operation rates on each member. You can select the period in the combo box placed at the top right corner of the window, for which the table data will be shown. Available values are Since Beginning, Last Minute, Last 10 Minutes and Last 1 Hour. NOTE: You need to enable the statistics for caches to monitor them in the Management Center. Use the &lt;statistics-enabled&gt; element or setStatisticsEnabled() method in declarative or programmatic configuration, respectively, to enable the statistics. Please refer to the JCache Declarative Configuration section for more information.","tags":"","url":"Monitoring_Caches.html"},{"title":"Managing Maps","text":"Map instances are listed under the Maps menu item on the left. When you click on a map, a new tab for monitoring that map instance opens on the right, as shown below. In this tab, you can monitor metrics and also re-configure the selected map. The below subsections explain the portions of this window. Map Browser Use the Map Browser tool to retrieve properties of the entries stored in the selected map. To open the Map Browser tool, click on the Map Browser button, located at the top right of the window. Once opened, the tool appears as a dialog, as shown below. Once the key and the key's type are specified and the Browse button is clicked, the key's properties along with its value are listed. Map Config Use the Map Config tool to set the selected map's attributes, such as the backup count, TTL, and eviction policy. To open the Map Config tool, click on the Map Config button, located at the top right of the window. Once opened, the tool appears as a dialog, as shown below. You can change any attribute and click the Update button to save your changes. Map Monitoring Besides the Map Browser and Map Config tools, the map monitoring page has monitoring options that are explained below. All of these options perform real-time monitoring. On top of the page, small charts monitor the size, throughput, memory usage, backup size, etc. of the selected map in real-time. The X-axis of all the charts show the current system time. You can select other small monitoring charts using the button at the top right of each chart. When you click the button, the monitoring options are listed, as shown below. When you click on a desired monitoring, the chart is loaded with the selected option. To open a chart as a separate dialog, click on the button placed at the top right of each chart. The monitoring charts below are available: Size: Monitors the size of the map. Y-axis is the entry count (should be multiplied by 1000). Throughput: Monitors get, put and remove operations performed on the map. Y-axis is the operation count. Memory: Monitors the memory usage on the map. Y-axis is the memory count. Backups: Chart loaded when &quot;Backup Size&quot; is selected. Monitors the size of the backups in the map. Y-axis is the backup entry count (should be multiplied by 1000). Backup Memory: Chart loaded when &quot;Backup Mem.&quot; is selected. Monitors the memory usage of the backups. Y-axis is the memory count. Hits: Monitors the hit count of the map. Puts\/s, Gets\/s, Removes\/s: These three charts monitor the put, get and remove operations (per second) performed on the selected map. Under these charts are Map Memory and Map Throughput data tables. The Map Memory data table provides memory metrics distributed over members, as shown below. From left to right, this table lists the IP address and port, entry counts, memory used by entries, backup entry counts, memory used by backup entries, events, hits, locks and dirty entries (in the cases where MapStore is enabled, these are the entries that are put to\/removed from the map but not written to\/removed from a database yet) of each entry in the map. You can navigate through the pages using the buttons at the bottom right of the table (First, Previous, Next, Last). You can ascend or descend the order of the listings by clicking on the column headings. Map Throughput data table provides information about the operations (get, put, remove) performed on each member in the map, as shown below. From left to right, this table lists: the IP address and port of each member, the put, get and remove operations on each member, the average put, get, remove latencies, and the maximum put, get, remove latencies on each member. You can select the period in the combo box placed at the top right corner of the window, for which the table data will be shown. Available values are Since Beginning, Last Minute, Last 10 Minutes and Last 1 Hour. You can navigate through the pages using the buttons placed at the bottom right of the table (First, Previous, Next, Last). To ascend or descent the order of the listings, click on the column headings.","tags":"","url":"Managing_Maps.html"},{"title":"Monitoring Replicated Maps","text":"Replicated Map instances are shown under the Replicated Maps menu item on the left. When you click on a Replicated Map, a new tab for monitoring that instance opens on the right, as shown below. In this tab, you can monitor metrics and also re-configure the selected Replicated Map. All of the statistics are real-time monitoring statistics. When you click on a desired monitoring, the chart is loaded with the selected option. Also you can open the chart in new window. Size: Monitors the size of the Replicated Map. Y-axis is the entry count (should be multiplied by 1000). Throughput: Monitors get, put and remove operations performed on the Replicated Map. Y-axis is the operation count. Memory: Monitors the memory usage on the Replicated Map. Y-axis is the memory count. Hits: Monitors the hit count of the Replicated Map. Puts\/s, Gets\/s, Removes\/s: These three charts monitor the put, get and remove operations (per second) performed on the selected Replicated Map, the average put, get, remove latencies, and the maximum put, get, remove latencies on each member. The Replicated Map Throughput Data Table provides information about operations (get, put, remove) performed on each member in the selected Replicated Map. From left to right, this table lists: the IP address and port of each member, the put, get, and remove operations on each member, the average put, get, and remove latencies, and the maximum put, get, and remove latencies on each member. You can select the period from the combo box placed at the top right corner of the window, in which the table data is shown. Available values are Since Beginning, Last Minute, Last 10 Minutes and Last 1 Hour. You can navigate through the pages using the buttons placed at the bottom right of the table (First, Previous, Next, Last). To ascend or descent the order of the listings, click on the column headings.","tags":"","url":"Monitoring_Replicated_Maps.html"},{"title":"Monitoring Queues","text":"Using the menu item Queues, you can monitor your queues data structure. When you expand this menu item and click on a queue, a new tab for monitoring that queue instance is opened on the right, as shown below. On top of the page, small charts monitor the size, offers and polls of the selected queue in real-time. The X-axis of all the charts shows the current system time. To open a chart as a separate dialog, click on the button placed at the top right of each chart. The monitoring charts below are available: Size: Monitors the size of the queue. Y-axis is the entry count (should be multiplied by 1000). Offers: Monitors the offers sent to the selected queue. Y-axis is the offer count. Polls: Monitors the polls sent to the selected queue. Y-axis is the poll count. Under these charts are Queue Statistics and Queue Operation Statistics tables. The Queue Statistics table provides item and backup item counts in the queue and age statistics of items and backup items at each member, as shown below. From left to right, this table lists the IP address and port, items and backup items on the queue of each member, and maximum, minimum and average age of items in the queue. You can navigate through the pages using the buttons placed at the bottom right of the table (First, Previous, Next, Last). The order of the listings in each column can be ascended or descended by clicking on column headings. Queue Operations Statistics table provides information about the operations (offers, polls, events) performed on the queues, as shown below. From left to right, this table lists the IP address and port of each member, and counts of offers, rejected offers, polls, poll misses and events. You can select the period in the combo box placed at the top right corner of the window to show the table data. Available values are Since Beginning, Last Minute, Last 10 Minutes and Last 1 Hour. You can navigate through the pages using the buttons placed at the bottom right of the table (First, Previous, Next, Last). Click on the column headings to ascend or descend the order of the listings.","tags":"","url":"Monitoring_Queues.html"},{"title":"Monitoring Topics","text":"To monitor your topics' metrics, click the topic name listed on the left panel under the Topics menu item. A new tab for monitoring that topic instance opens on the right, as shown below. On top of the page, two charts monitor the Publishes and Receives in real-time. They show the published and received message counts of the cluster, the members of which are subscribed to the selected topic. The X-axis of both charts show the current system time. To open a chart as a separate dialog, click on the button placed at the top right of each chart. Under these charts is the Topic Operation Statistics table. From left to right, this table lists the IP addresses and ports of each member, and counts of the messages published and received per second in real-time. You can select the period in the combo box placed at top right corner of the table to show the table data. The available values are Since Beginning, Last Minute, Last 10 Minutes and Last 1 Hour. You can navigate through the pages using the buttons placed at the bottom right of the table (First, Previous, Next, Last). Click on the column heading to ascend or descend the order of the listings.","tags":"","url":"Monitoring_Topics.html"},{"title":"Monitoring Reliable Topics","text":"To monitor your reliable topics' metrics, click the reliable topic name listed on the left panel under the Reliable Topics menu item. A new tab for monitoring that reliable topic instance opens on the right, as shown below. On top of the page, two charts monitor the Publishes and Receives in real-time. They show the published and received message counts of the cluster, the members of which are subscribed to the selected reliable topic. The X-axis of both charts show the current system time. To open a chart as a separate dialog, click on the button placed at the top right of each chart. Under these charts is the Reliable Topic Operation Statistics table. From left to right, this table lists the IP addresses and ports of each member, and counts of the messages published and received per second in real-time. You can select the period in the combo box placed at top right corner of the table to show the table data. The available values are Since Beginning, Last Minute, Last 10 Minutes and Last 1 Hour. You can navigate through the pages using the buttons placed at the bottom right of the table (First, Previous, Next, Last). Click on the column heading to ascend or descend the order of the listings.","tags":"","url":"Monitoring_Reliable_Topics.html"},{"title":"Monitoring MultiMaps","text":"MultiMap is a specialized map where you can associate a key with multiple values. This monitoring option is similar to the Maps option: the same monitoring charts and data tables monitor MultiMaps. The differences are that you cannot browse the MultiMaps and re-configure it. Please see Managing Maps.","tags":"","url":"Monitoring_MultiMaps.html"},{"title":"Monitoring Executors","text":"Executor instances are listed under the Executors menu item on the left. When you click on a executor, a new tab for monitoring that executor instance opens on the right, as shown below. On top of the page, small charts monitor the pending, started, completed, etc. executors in real-time. The X-axis of all the charts shows the current system time. You can select other small monitoring charts using the button placed at the top right of each chart. Click the button to list the monitoring options, as shown below. When you click on a desired monitoring, the chart loads with the selected option. To open a chart as a separate dialog, click on the button placed at top right of each chart. The below monitoring charts are available: Pending: Monitors the pending executors. Y-axis is the executor count. Started: Monitors the started executors. Y-axis is the executor count. Start Lat. (msec.): Shows the latency when executors are started. Y-axis is the duration in milliseconds. Completed: Monitors the completed executors. Y-axis is the executor count. Comp. Time (msec.): Shows the completion period of executors. Y-axis is the duration in milliseconds. Under these charts is the Executor Operation Statistics table, as shown below. From left to right, this table lists the IP address and port of members, the counts of pending, started and completed executors per second, and the execution time and average start latency of executors on each member. You can navigate through the pages using the buttons placed at the bottom right of the table (First, Previous, Next, Last). Click on the column heading to ascend or descend the order of the listings.","tags":"","url":"Monitoring_Executors.html"},{"title":"Monitoring WAN Replication","text":"WAN Replication schemes are listed under the WAN menu item on the left. When you click on a scheme, a new tab for monitoring the targets which that scheme has appears on the right, as shown below. In this tab, you see WAN Replication Operations Table for each target which belongs to this scheme. One of the example tables is shown below. Connected: Status of the member connection to the target. Outbound Recs (sec): Average of event count per second. Please see the paragraph below. Outbound Lat (ms): Average latency of sending a record to the target from this member. Please see the paragraph below. Outbound Queue: Number of records waiting in the queue to be sent to the target. Action: Stops\/Resumes replication of this member's records. Outbound Recs and Outbound Lat are based on the following internal statistics: Total published event count (TBEC): Total number of events that are successfully sent to the target cluster since the start-up of the member. Total latency (TL): Grand total of each event's waiting time in the queue, including network transmit and receiving ACK from the target. Each member sends these two statistics to the Management Center at intervals of 3 seconds (update interval). Management Center derives Outbound Recs\/s and Outbound Lat from these statistics as formulated below: Outbound Recs\/s = (Current TBEC - Previous TBEC) \/ Update Interval Outbound Latency = (Current TL - Previous TL) \/ Update Interval","tags":"","url":"Monitoring_WAN_Replication.html"},{"title":"Monitoring Members","text":"Use this menu item to monitor each cluster member and perform operations like running garbage collection (GC) and taking a thread dump. Once you select a member from the menu, a new tab for monitoring that member opens on the right, as shown below. The CPU Utilization chart shows the percentage of CPU usage on the selected member. The Memory Utilization chart shows the memory usage on the selected member with three different metrics (maximum, used and total memory). You can open both of these charts as separate windows using the button placed at top right of each chart; this gives you a clearer view of the chart. The window titled Partitions shows which partitions are assigned to the selected member. Runtime is a dynamically updated window tab showing the processor number, the start and up times, and the maximum, total and free memory sizes of the selected member. These values are collected from the default MXBeans provided by the Java Virtual Machine (JVM). Descriptions from the Javadocs and some explanations are below: Number of Processors: Number of processors available to the member (JVM). Start Time: Start time of the member (JVM) in milliseconds. Up Time: Uptime of the member (JVM) in milliseconds Maximum Memory: Maximum amount of memory that the member (JVM) will attempt to use. Free Memory: Amount of free memory in the member (JVM). Used Heap Memory: Amount of used memory in bytes. Max Heap Memory: Maximum amount of memory in bytes that can be used for memory management. Used Non-Heap Memory: Amount of used memory in bytes. Max Non-Heap Memory: Maximum amount of memory in bytes that can be used for memory management. Total Loaded Classes: Total number of classes that have been loaded since the member (JVM) has started execution. Current Loaded Classes: Number of classes that are currently loaded in the member (JVM). Total Unloaded Classes: Total number of classes unloaded since the member (JVM) has started execution. Total Thread Count: Total number of threads created and also started since the member (JVM) started. Active Thread Count: Current number of live threads including both daemon and non-daemon threads. Peak Thread Count: Peak live thread count since the member (JVM) started or peak was reset. Daemon Thread Count: Current number of live daemon threads. OS: Free Physical Memory: Amount of free physical memory in bytes. OS: Committed Virtual Memory: Amount of virtual memory that is guaranteed to be available to the running process in bytes. OS: Total Physical Memory: Total amount of physical memory in bytes. OS: Free Swap Space: Amount of free swap space in bytes. Swap space is used when the amount of physical memory (RAM) is full. If the system needs more memory resources and the RAM is full, inactive pages in memory are moved to the swap space. OS: Total Swap Space: Total amount of swap space in bytes. OS: Maximum File Descriptor Count: Maximum number of file descriptors. File descriptor is an integer number that uniquely represents an opened file in the operating system. OS: Open File Descriptor Count: Number of open file descriptors. OS: Process CPU Time: CPU time used by the process on which the member (JVM) is running in nanoseconds. OS: Process CPU Load: Recent CPU usage for the member (JVM) process. This is a double with a value from 0.0 to 1.0. A value of 0.0 means that none of the CPUs were running threads from the member (JVM) process during the recent period of time observed, while a value of 1.0 means that all CPUs were actively running threads from the member (JVM) 100% of the time during the recent period being observed. Threads from the member (JVM) include the application threads as well as the member (JVM) internal threads. OS: System Load Average: System load average for the last minute. The system load average is the average over a period of time of this sum: (the number of runnable entities queued to the available processors) + (the number of runnable entities running on the available processors). The way in which the load average is calculated is operating system specific but it is typically a damped time-dependent average. OS: System CPU Load: Recent CPU usage for the whole system. This is a double with a value from 0.0 to 1.0. A value of 0.0 means that all CPUs were idle during the recent period of time observed, while a value of 1.0 means that all CPUs were actively running 100% of the time during the recent period being observed. NOTE: These descriptions may vary according to the JVM version or vendor. Next to the Runtime tab, the Properties tab shows the system properties. The Member Configuration window shows the XML configuration of the connected Hazelcast cluster. The List of Slow Operations gives an overview of detected slow operations which occurred on that member. The data is collected by the SlowOperationDetector. Click on an entry to open a dialog which shows the stacktrace and detailed information about each slow invocation of this operation. Besides the aforementioned monitoring charts and windows, you can also perform operations on the selected member through this page. The operation buttons are located at the top right of the page, as explained below: Run GC: Press this button to execute garbage collection on the selected member. A notification stating that the GC execution was successful will be shown. Thread Dump: Press this button to take a thread dump of the selected member and show it as a separate dialog to the user. Shutdown Node: Press this button to shutdown the selected member. Promote Member: Only shown for lite members. Press this button to promote a lite member to a data member.","tags":"","url":"Monitoring_Members.html"},{"title":"Monitoring Clients","text":"You can use the Clients menu item to monitor all the clients that are connected to your Hazelcast cluster. Currently only the Java clients can be monitored. As a prerequisite, you need to enable the client statistics before starting your clients. This can be done by setting the hazelcast.client.statistics.enabled system property to true. Please see the Client System Properties section in the Hazelcast IMDG Reference Manual for more information. After you enable the client statistics, you can monitor your clients using Hazelcast Management Center. When you click on the Clients menu item, a new tab &quot;Clients&quot; opens and it lists all of your clients that are connected to your cluster. An example screen is shown below: Once you select a client from the table, a new tab for monitoring that client opens on the right, as shown below. Title of the tab is the unique identifier of the selected client. The Heap Memory Utilization chart shows the memory usage on the selected client with three different metrics (maximum, used and total memory). You can open both of these charts as separate windows using the button placed at top right of each chart; this gives you a clearer view of the chart. General is a dynamically updated window tab showing general information about the client. Below are brief explanations for each piece of information: Name: Name of the client instance. Address: Address of the client, shown as &lt;IP&gt;:&lt;port&gt;. Type: Type of the client. Java client is the only supported client type at the moment. Enterprise: Yes, if the client is an Hazelcast IMDG Enterprise client. Member Connection: Shows to which member a client is currently connected to. Please note that ALL means a client is configured so that it might connect to all members of a cluster, i.e., it might not have a connection to all members all the time. Version: Version of the client. Last Connection to Cluster: Time that the client connected to the cluster. It is reset on each reconnection. Last Statistics Collection: Time when the latest update for the statistics is collected from the client. User Executor Queue Size: Number of waiting tasks in the client user executor. Next to the General tab, the Runtime tab shows the processor number, uptime, and maximum, total and free memory sizes of the selected client. These values are collected from the default MXBeans provided by the Java Virtual Machine (JVM). Descriptions from the Javadocs and some explanations are below: Number of Processors: Number of processors available to the client (JVM). Up Time: Uptime of the client (JVM). Maximum Memory: Maximum amount of memory that the client (JVM) will attempt to use. Total Memory: Amount of total heap memory currently available for current and future objects in the client (JVM). Free Memory: Amount of free heap memory in the client (JVM). Used Memory: Amount of used heap memory in the client (JVM). Next to the Runtime tab, the OS tab shows statistics about the operating system of the client. These values are collected from the default MXBeans provided by the Java Virtual Machine (JVM). Descriptions from the Javadocs and some explanations are below: Free Physical Memory: Amount of free physical memory. Committed Virtual Memory: Amount of virtual memory that is guaranteed to be available to the running process. Total Physical Memory: Total amount of physical memory. Free Swap Space: Amount of free swap space. Swap space is used when the amount of physical memory (RAM) is full. If the system needs more memory resources and the RAM is full, inactive pages in memory are moved to the swap space. Total Swap Space: Total amount of swap space. Maximum File Descriptor Count: Maximum number of file descriptors. File descriptor is an integer number that uniquely represents an opened file in the operating system. Open File Descriptor Count: Number of open file descriptors. Process CPU Time: CPU time used by the process on which the member (JVM) is running. System Load Average: System load average for the last minute. The system load average is the average over a period of time of this sum: (the number of runnable entities queued to the available processors) + (the number of runnable entities running on the available processors). The way in which the load average is calculated is operating system specific but it is typically a damped time-dependent average. NOTE: Some of the Runtime\/OS statistics may not be available for your client's JVM implementation\/operating system. UNKNOWN is shown for these types of statistics. Please refer to your JVM\/operating system documentation for further details. The Client Near Cache Statistics table shows statistics related to Near Cache of a client. There are two separate tables; one for maps and one for caches. Map\/Cache Name: Name of the map or cache. Creation Time: Creation time of this Near Cache on the client. Evictions: Number of evictions of Near Cache entries owned by the client. Expirations: Number of TTL and max-idle expirations of Near Cache entries owned by the client. Hits: Number of hits (reads) of Near Cache entries owned by the client. Misses: Number of misses of Near Cache entries owned by the client. Owned Entry Count: Number of Near Cache entries owned by the client. Owned Entry Memory Cost: Memory cost of Near Cache entries owned by the client. LP Duration: Duration of the last Near Cache key persistence (when the pre-load feature is enabled). LP Key Count: Number of Near Cache key persistences (when the pre-load feature is enabled). LP Time: Time of the last Near Cache key persistence (when the pre-load feature is enabled). LP Written Bytes: Written number of bytes of the last Near Cache key persistence (when the pre-load feature is enabled). LP Failure: Failure reason of the last Near Cache persistence (when the pre-load feature is enabled). NOTE: Please note that you can configure the time interval for which the client statistics are collected and sent to the cluster, using the system property hazelcast.client.statistics.period.seconds. Please see the Client System Properties section in the Hazelcast IMDG Reference Manual for more information.","tags":"","url":"Monitoring_Clients.html"},{"title":"Scripting","text":"You can use the scripting feature of this tool to execute codes on the cluster. To open this feature as a tab, select Scripting located at the toolbar on top. Once selected, the scripting feature opens as shown below. In this window, the Scripting part is the actual coding editor. You can select the members on which the code will execute from the Members list shown at the right side of the window. Below the members list, a combo box enables you to select a scripting language: currently, JavaScript, Ruby, Groovy and Python languages are supported. After you write your script and press the Execute button, you can see the execution result in the Result part of the window. NOTE: To use the scripting languages other than JavaScript on a member, the libraries for those languages should be placed in the classpath of that member. There are Save and Delete buttons on the top right of the scripting editor. To save your scripts, press the Save button after you type a name for your script into the field next to this button. The scripts you saved are listed in the Saved Scripts part of the window, located at the bottom right of the page. Click on a saved script from this list to execute or edit it. If you want to remove a script that you wrote and saved before, select it from this list and press the Delete button. In the scripting engine you have a HazelcastInstance bonded to a variable named hazelcast. You can invoke any method that HazelcastInstance has via the hazelcast variable. You can see example usage for JavaScript below. var name = hazelcast.getName(); var node = hazelcast.getCluster().getLocalMember(); var employees = hazelcast.getMap(&quot;employees&quot;); employees.put(&quot;1&quot;,&quot;John Doe&quot;); employees.get(&quot;1&quot;); \/\/ will return &quot;John Doe&quot;","tags":"","url":"Scripting.html"},{"title":"Executing Console Commands","text":"The Management Center has a console feature that enables you to execute commands on the cluster. For example, you can perform puts and gets on a map, after you set the namespace with the command ns &lt;name of your map&gt;. The same is valid for queues, topics, etc. To execute your command, type it into the field below the console and press Enter. Type help to see all the commands that you can use. Open a console window by clicking on the Console button located on the toolbar. Below is a sample view with some executed commands.","tags":"","url":"Executing_Console_Commands.html"},{"title":"Creating Alerts","text":"You can use the alerts feature of this tool to receive alerts and\/or e-mail notifications by creating filters. In these filters, you can specify criteria for cluster members or data structures. When the specified criteria are met for a filter, the related alert is shown as a pop-up message on the top right of the page or sent as an e-mail. Once you click the Alerts button located on the toolbar, the page shown below appears. If you want to enable the Management Center to send e-mail notifications to the Management Center Admin users, you need to configure the SMTP server. To do this, click on the Create STMP Config shown above. The form shown below appears. In this form, specify the e-mail address from which the notifications will be sent and also its password. Then, provide the SMTP server host address and port. Finally, check the TLS Connection checkbox if the connection is secured by TLS (Transport Layer Security). After you provide the required information, click on the Save Config button. After a processing period (for a couple of seconds), the form will be closed if the configuration is created successfully. In this case, an e-mail will be sent to the e-mail address you provided in the form stating that the SMTP configuration is successful and e-mail alert system is created. If not, you will see an error message at the bottom of this form as shown below. As you can see, the reasons can be wrong SMTP configuration or connectivity problems. In this case, please check the form fields and check for any causes for the connections issues with your server. Creating Filters for Cluster Members Select Member Alerts check box to create filters for some or all members in the cluster. Once selected, the next screen asks for which members the alert will be created. Select the desired members and click on the Next button. On the next page (shown below), specify the criteria. You can create alerts when: free memory on the selected members is less than the specified number. used heap memory is larger than the specified number. the number of active threads are less than the specified count. the number of daemon threads are larger than the specified count. When two or more criteria is specified they will be bound with the logical operator AND. On the next page, give a name for the filter. Then, select whether notification e-mails will be sent to the Management Center Admins using the Send Email Alert checkbox. Then, provide a time interval (in seconds) for which the e-mails with the same notification content will be sent using the Email Interval (secs) field. Finally, select whether the alert data will be written to the disk (if checked, you can see the alert log at the folder \/users\/\/mancenter). Click on the Save button; your filter will be saved and put into the Filters part of the page. To edit the filter, click on the icon. To delete it, click on the icon. Creating Filters for Data Types Select the Data Type Alerts check box to create filters for data structures. The next screen asks for which data structure (maps, queues, multimaps, executors) the alert will be created. Once a structure is selected, the next screen immediately loads and you then select the data structure instances (i.e. if you selected Maps, it will list all the maps defined in the cluster, you can select one map or more). Select as desired, click on the Next button, and select the members on which the selected data structure instances will run. The next screen, as shown below, is the one where you specify the criteria for the selected data structure. As the screen shown above shows, you will select an item from the left combo box, select the operator in the middle one, specify a value in the input field, and click on the Add button. You can create more than one criteria in this page; those will be bound by the logical operator AND. After you specify the criteria, click the Next button. On the next page, give a name for the filter. Then, select whether notification e-mails will be sent to the Management Center Admins using the Send Email Alert checkbox. Then, provide a time interval (in seconds) for which the e-mails with the same notification content will be sent using the Email Interval (secs) field. Finally, select whether the alert data will be written to the disk (if checked, you can see the alert log at the folder \/users\/\/mancenter). Click on the Save button; your filter will be saved and put into the Filters part of the page. To edit the filter, click on the icon. To delete it, click on the icon.","tags":"","url":"Creating_Alerts.html"},{"title":"Administering Management Center","text":"NOTE: This toolbar item is available only to admin users. The Admin user can add, edit, and remove users and specify the permissions for the users of Management Center. To perform these operations, click on the Administration button located on the toolbar. The page below appears. Users To add a user to the system, specify the username, e-mail and password in the Add\/Edit User part of the page. If the user to be added will have administrator privileges, select isAdmin checkbox. Permissions field has the following checkboxes: Metrics Only: If this permission is given to the user, only Home, Documentation and Time Travel items will be visible at the toolbar on that user's session. Also, the users with this permission cannot browse a map or a cache to see their contents, cannot update a map configuration, run a garbage collection and take a thread dump on a cluster member, or shutdown a member (please see Monitoring Members). Read Only: If this permission is given to the user, only Home, Documentation and Time Travel items will be visible at the toolbar at that user's session. Also, users with this permission cannot update a map configuration, run a garbage collection and take a thread dump on a cluster member, or shutdown a member (please see Monitoring Members). Read\/Write: If this permission is given to the user, Home, Scripting, Console, Documentation and Time Travel items will be visible. The users with this permission can update a map configuration and perform operations on the members. After you enter\/select all fields, click Save button to create the user. You will see the newly created user's username on the left side, in the Users part of the page. To edit or delete a user, select a username listed in the Users. Selected user information appears on the right side of the page. To update the user information, change the fields as desired and click the Save button. To delete the user from the system, click the Delete button. License To update the management center license, you can click on the Update License button and enter the new license code. You will see the expiration date of your current license on the screen. Socket interceptor If the Hazelcast cluster is configured to use a socket interceptor, you need to configure a socket interceptor for Management Center as well. You can click on the Configure Socket Interceptor button, enter the name of your socket interceptor class and the configuration parameters. Click the Configure button to save your configuration and enable socket interceptor. This class needs to be on your classpath when you're starting Management Center. The configuration parameters you provide will be used to invoke the init method of your socket interceptor implementation if it has such a method. Following is a sample socket interceptor class implementation: package com.example; import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.net.Socket; public class SampleSocketInterceptor { \/\/ this method is optional public void init(Map&lt;String, String&gt; parameters) { \/\/ here goes the initialization logic for your socket interceptor } public void onConnect(Socket connectedSocket) throws IOException { \/\/ socket interceptor logic try { OutputStream out = connectedSocket.getOutputStream(); InputStream in = connectedSocket.getInputStream(); int multiplyBy = 2; while (true) { int read = in.read(); if (read == 0) { break; } out.write(read * multiplyBy); out.flush(); } } catch (IOException e) { throw e; } } } A socket interceptor implementation needs to satisfy the following two conditions: Have a no-argument constructor Have a public onConnect method with the following signature: void onConnect(Socket connectedSocket) throws IOException Disabling socket interceptor To disable the socket interceptor, you need to click the Configure Socket Interceptor button first and then click the Disable button on the dialog.","tags":"","url":"Administering_Management_Center.html"},{"title":"Cluster State","text":"NOTE: This toolbar item is available only to admin users. The admin user can see and change the cluster state and shut down the cluster using the operations listed in this screen as shown below. Cluster States: Active: Cluster will continue to operate without any restriction. All operations are allowed. This is the default state of a cluster. No Migration: Migrations (partition rebalancing) and backup replications are not allowed. Cluster will continue to operate without any restriction. All other operations are allowed. Frozen: New members are not allowed to join, except the members left in this state or Passive state. All other operations except migrations are allowed and will operate without any restriction. Passive: New members are not allowed to join, except the members left in this state or Frozen state. All operations, except the ones marked with AllowedDuringPassiveState, will be rejected immediately. In Transition: Shows that the cluster state is in transition. This is a temporary and intermediate state. It is not allowed to set it explicitly. Changing Cluster State Click the dropdown menu and choose the state to which you want your cluster to change. A pop-up will appear and stay on the screen until the state is successfully changed. Shutting Down the Cluster Click the Shutdown button. A pop-up will appear and stay on screen until the cluster is successfully shutdown. If an exception occurs during the state change or shutdown operation on the cluster, this exception message will be shown on the screen as a notification.","tags":"","url":"Cluster_State.html"},{"title":"Hot Restart","text":"Force Start the Cluster Restart process cannot be completed if a member crashes permanently and cannot recover from the failure since it cannot start or it fails to load its own data. In that case, you can force the cluster to clean its persisted data and make a fresh start. This process is called force start. Click the Force Start button. A pop-up will appear and stay on screen until the operation is triggered. If an exception occurs, this exception message will be showed on the screen as a notification. NOTE: The operations explained in this section (Hot Restart) can also be performed using REST API and the script cluster.sh. Please refer to the Using REST API for Cluster Management section and Using the Script cluster.sh section.","tags":"","url":"Hot_Restart.html"},{"title":"Rolling Upgrade","text":"NOTE: This toolbar item is available only to admin users. The admin user can upgrade the cluster version once all members of the cluster have been upgraded to the intended codebase version as described in the Rolling Upgrade Procedure section of the Hazelcast IMDG Reference Manual. Click on the Rolling Upgrade button under the Operations menu to open the Upgrade Cluster Version dialog. Upgrade Cluster Version Enter the group name\/password of the cluster and the version you want to upgrade the cluster to in the dialog that is opened, and click on the Change Version button. Once the operation succeeds, you will see the following notification:","tags":"","url":"Rolling_Upgrade.html"},{"title":"Checking Past Status with Time Travel","text":"Use the Time Travel toolbar item to check the status of the cluster at a time in the past. When you select it on the toolbar, a small window appears on top of the page, as shown below. To see the cluster status in a past time, you should first enable the Time Travel. Click on the area where it says OFF (on the right of Time Travel window). It will turn to ON after it asks whether to enable the Time Travel with a dialog: click on Enable in the dialog to enable the Time Travel. Once it is ON, the status of your cluster will be stored on your disk as long as your web server is alive. You can go back in time using the slider and\/or calendar and check your cluster's situation at the selected time. All data structures and members can be monitored as if you are using the management center normally (charts and data tables for each data structure and members). Using the arrow buttons placed at both sides of the slider, you can go back or further with steps of 5 seconds. It will show status if Time Travel has been ON at the selected time in past; otherwise, all the charts and tables will be shown as empty. The historical data collected with Time Travel feature are stored in a file database on the disk. These files can be found in the folder &lt;User\u00e2\u0080\u0098s Home Directory&gt;\/mancenter&lt;Hazelcast version&gt;, e.g., \/home\/mancenter3.5. This folder can be changed using the hazelcast.mancenter.home property on the server where Management Center is running. Time travel data files are created monthly. Their file name format is [group-name]-[year][month].db and [group-name]-[year][month].lg. Time travel data is kept in the *.db files. The files with the extension lg are temporary files created internally and you do not have to worry about them. Management Center has no automatic way of removing or archiving old time travel data files. They remain in the aforementioned folder until you delete or archive them.","tags":"","url":"Checking_Past_Status_with_Time_Travel.html"},{"title":"Configuring Clustered JMX","text":"Hazelcast IMDG Enterprise Clustered JMX via Management Center allows you to monitor clustered statistics of distributed objects from a JMX interface. Configuring Clustered JMX In order to configure Clustered JMX, use the following command line parameters for your Management Center deployment. -Dhazelcast.mc.jmx.enabled=true (default is false) -Dhazelcast.mc.jmx.port=9000 (optional, default is 9999) -Dcom.sun.management.jmxremote.ssl=false Starting with Hazelcast Management Center 3.8.4, you can also use the following parameters: -Dhazelcast.mc.jmx.rmi.port=9001 (optional, default is 9998) -Dhazelcast.mc.jmx.host=localhost (optional, default is server's host name) With embedded Jetty, you do not need to deploy your Management Center application to any container or application server. You can start Management Center application with Clustered JMX enabled as shown below. java -Dhazelcast.mc.jmx.enabled=true -Dhazelcast.mc.jmx.port=9999 -Dcom.sun.management.jmxremote.ssl=false -jar mancenter-3.3.jar Once Management Center starts, you should see a log similar to below. INFO: Management Center 3.3 Jun 05, 2014 11:55:32 AM com.hazelcast.webmonitor.service.jmx.impl.JMXService INFO: Starting Management Center JMX Service on port :9999 You should be able to connect to Clustered JMX interface from the address localhost:9999. You can use jconsole or any other JMX client to monitor your Hazelcast Cluster. As a sample, below is the jconsole screenshot of the Clustered JMX hierarchy. Enabling TLS\/SSL for Clustered JMX By default, Clustered JMX is served unencrypted. To enable TLS\/SSL for Clustered JMX, use the following command line parameters for your Management Center deployment. -Dhazelcast.mc.jmx.ssl=true (default is false) -Djavax.net.ssl.keyStore=path to your keyStore -Djavax.net.ssl.keyStorePassword=password for your keyStore Following is an example on how to start Management Center with a TLS\/SSL enabled Clustered JMX service on port 65432: java -Dhazelcast.mc.jmx.enabled=true -Dhazelcast.mc.jmx.port=65432 -Dhazelcast.mc.jmx.ssl=true -Djavax.net.ssl.keyStore=\/some\/dir\/selfsigned.jks -Djavax.net.ssl.keyStorePassword=yourpassword -jar mancenter-3.8.1.war Then you can use the following command to connect to the Clustered JMX service using JConsole with address localhost:65432: jconsole -J-Djavax.net.ssl.trustStore=\/some\/dir\/selftrusted.ts -J-Djavax.net.ssl.trustStorePassword=trustpass","tags":"","url":"Clustered_JMX_via_Management_Center\/Configuring_Clustered_JMX.html"},{"title":"Clustered JMX API","text":"The management beans are exposed with the following object name format. ManagementCenter[cluster name]:type=&lt;object type&gt;,name=&lt;object name&gt;,member=&quot;&lt;cluster member IP address&gt;&quot; Object name starts with ManagementCenter prefix. Then it has the cluster name in brackets followed by a colon. After that, type,name and member attributes follows, each separated with a comma. type is the type of object. Values are Clients, Executors, Maps, Members, MultiMaps, Queues, Services, and Topics. name is the name of object. member is the member address of object (only required if the statistics are local to the member). A sample bean is shown below. ManagementCenter[dev]:type=Services,name=OperationService,member=&quot;192.168.2.79:5701&quot; Here is the list of attributes that are exposed from the Clustered JMX interface. ManagementCenter[&lt;ClusterName&gt;] ClientStats &lt;Client UUID&gt; HeapUsedMemory HeapFreeMemory HeapMaxMemory HeapTotalMemory ClientName AvailableProcessors Uptime Enterprise MemberConnection ClusterConnectionTimestamp LastStatisticsCollectionTime UserExecutorQueueSize CommittedVirtualMemorySize FreePhysicalMemorySize FreeSwapSpaceSize MaxFileDescriptorCount OpenFileDescriptorCount ProcessCpuTime SystemLoadAverage TotalPhysicalMemorySize TotalSwapSpaceSize Version Address Type CACHE &lt;Cache Name&gt; Evictions Expirations Hits Misses OwnedEntryCount OwnedEntryMemoryCost LastPersistenceDuration LastPersistenceKeyCount LastPersistenceTime LastPersistenceWrittenBytes LastPersistenceFailure CreationTime MAP &lt;Map Name&gt; Evictions Expirations Hits Misses OwnedEntryCount OwnedEntryMemoryCost LastPersistenceDuration LastPersistenceKeyCount LastPersistenceTime LastPersistenceWrittenBytes LastPersistenceFailure CreationTime Clients &lt;Client Address&gt; Address ClientType Uuid Executors &lt;Executor Name&gt; Cluster Name StartedTaskCount CompletedTaskCount CancelledTaskCount PendingTaskCount Maps &lt;Map Name&gt; Cluster Name BackupEntryCount BackupEntryMemoryCost CreationTime DirtyEntryCount Events GetOperationCount HeapCost Hits LastAccessTime LastUpdateTime LockedEntryCount MaxGetLatency MaxPutLatency MaxRemoveLatency OtherOperationCount OwnedEntryCount PutOperationCount RemoveOperationCount ReplicatedMaps &lt;Replicated Map Name&gt; Cluster Name BackupEntryCount BackupEntryMemoryCost CreationTime DirtyEntryCount Events GetOperationCount HeapCost Hits LastAccessTime LastUpdateTime LockedEntryCount MaxGetLatency MaxPutLatency MaxRemoveLatency OtherOperationCount OwnedEntryCount PutOperationCount RemoveOperationCount Members &lt;Member Address&gt; ConnectedClientCount HeapFreeMemory HeapMaxMemory HeapTotalMemory HeapUsedMemory IsMaster OwnedPartitionCount MultiMaps &lt;MultiMap Name&gt; Cluster Name BackupEntryCount BackupEntryMemoryCost CreationTime DirtyEntryCount Events GetOperationCount HeapCost Hits LastAccessTime LastUpdateTime LockedEntryCount MaxGetLatency MaxPutLatency MaxRemoveLatency OtherOperationCount OwnedEntryCount PutOperationCount RemoveOperationCount Queues &lt;Queue Name&gt; Cluster Name MinAge MaxAge AvgAge OwnedItemCount BackupItemCount OfferOperationCount OtherOperationsCount PollOperationCount RejectedOfferOperationCount EmptyPollOperationCount EventOperationCount CreationTime Services ConnectionManager ActiveConnectionCount ClientConnectionCount ConnectionCount EventService EventQueueCapacity EventQueueSize EventThreadCount OperationService ExecutedOperationCount OperationExecutorQueueSize OperationThreadCount RemoteOperationCount ResponseQueueSize RunningOperationsCount PartitionService ActivePartitionCount PartitionCount ProxyService ProxyCount ManagedExecutor[hz::async] Name CompletedTaskCount MaximumPoolSize PoolSize QueueSize RemainingQueueCapacity Terminated ManagedExecutor[hz::client] Name CompletedTaskCount MaximumPoolSize PoolSize QueueSize RemainingQueueCapacity Terminated ManagedExecutor[hz::global-operation] Name CompletedTaskCount MaximumPoolSize PoolSize QueueSize RemainingQueueCapacity Terminated ManagedExecutor[hz::io] Name CompletedTaskCount MaximumPoolSize PoolSize QueueSize RemainingQueueCapacity Terminated ManagedExecutor[hz::query] Name CompletedTaskCount MaximumPoolSize PoolSize QueueSize RemainingQueueCapacity Terminated ManagedExecutor[hz::scheduled] Name CompletedTaskCount MaximumPoolSize PoolSize QueueSize RemainingQueueCapacity Terminated ManagedExecutor[hz::system] Name CompletedTaskCount MaximumPoolSize PoolSize QueueSize RemainingQueueCapacity Terminated Topics &lt;Topic Name&gt; Cluster Name CreationTime PublishOperationCount ReceiveOperationCount","tags":"","url":"Clustered_JMX_via_Management_Center\/Clustered_JMX_API.html"},{"title":"Integrating with New Relic","text":"Use the Clustered JMX interface to integrate Hazelcast Management Center with New Relic. To perform this integration, attach New Relic Java agent and provide an extension file that describes which metrics will be sent to New Relic. Please see Custom JMX instrumentation by YAML on the New Relic webpage. Below is an example Map monitoring .yml file for New Relic. name: Clustered JMX version: 1.0 enabled: true jmx: - object_name: ManagementCenter[clustername]:type=Maps,name=mapname metrics: - attributes: PutOperationCount, GetOperationCount, RemoveOperationCount, Hits,\\ BackupEntryCount, OwnedEntryCount, LastAccessTime, LastUpdateTime type: simple - object_name: ManagementCenter[clustername]:type=Members,name=&quot;member address in\\ double quotes&quot; metrics: - attributes: OwnedPartitionCount type: simple Put the .yml file in the extensions folder in your New Relic installation. If an extensions folder does not exist there, create one. After you set your extension, attach the New Relic Java agent and start Management Center as shown below. java -javaagent:\/path\/to\/newrelic.jar -Dhazelcast.mc.jmx.enabled=true\\ -Dhazelcast.mc.jmx.port=9999 -jar mancenter-3.3.jar If your logging level is set as FINER, you should see the log listing in the file newrelic_agent.log, which is located in the logs folder in your New Relic installation. Below is an example log listing. Jun 5, 2014 14:18:43 +0300 [72696 62] com.newrelic.agent.jmx.JmxService FINE: JMX Service : querying MBeans (1) Jun 5, 2014 14:18:43 +0300 [72696 62] com.newrelic.agent.jmx.JmxService FINER: JMX Service : MBeans query ManagementCenter[dev]:type=Members, name=&quot;192.168.2.79:5701&quot;, matches 1 Jun 5, 2014 14:18:43 +0300 [72696 62] com.newrelic.agent.jmx.JmxService FINER: Recording JMX metric OwnedPartitionCount : 68 Jun 5, 2014 14:18:43 +0300 [72696 62] com.newrelic.agent.jmx.JmxService FINER: JMX Service : MBeans query ManagementCenter[dev]:type=Maps,name=orders, matches 1 Jun 5, 2014 14:18:43 +0300 [72696 62] com.newrelic.agent.jmx.JmxService FINER: Recording JMX metric Hits : 46,593 Jun 5, 2014 14:18:43 +0300 [72696 62] com.newrelic.agent.jmx.JmxService FINER: Recording JMX metric BackupEntryCount : 1,100 Jun 5, 2014 14:18:43 +0300 [72696 62] com.newrelic.agent.jmx.JmxService FINER: Recording JMX metric OwnedEntryCount : 1,100 Jun 5, 2014 14:18:43 +0300 [72696 62] com.newrelic.agent.jmx.JmxService FINER: Recording JMX metric RemoveOperationCount : 0 Jun 5, 2014 14:18:43 +0300 [72696 62] com.newrelic.agent.jmx.JmxService FINER: Recording JMX metric PutOperationCount : 118,962 Jun 5, 2014 14:18:43 +0300 [72696 62] com.newrelic.agent.jmx.JmxService FINER: Recording JMX metric GetOperationCount : 0 Jun 5, 2014 14:18:43 +0300 [72696 62] com.newrelic.agent.jmx.JmxService FINER: Recording JMX metric LastUpdateTime : 1,401,962,426,811 Jun 5, 2014 14:18:43 +0300 [72696 62] com.newrelic.agent.jmx.JmxService FINER: Recording JMX metric LastAccessTime : 1,401,962,426,811 Then you can navigate to your New Relic account and create Custom Dashboards. Please see Creating custom dashboards. While you are creating the dashboard, you should see the metrics that you are sending to New Relic from Management Center in the Metrics section under the JMX folder.","tags":"","url":"Clustered_JMX_via_Management_Center\/Integrating_with_New_Relic.html"},{"title":"Integrating with AppDynamics","text":"Use the Clustered JMX interface to integrate Hazelcast Management Center with AppDynamics. To perform this integration, attach AppDynamics Java agent to the Management Center. For agent installation, refer to Install the App Agent for Java page. For monitoring on AppDynamics, refer to Using AppDynamics for JMX Monitoring page. After installing AppDynamics agent, you can start Management Center as shown below. java -javaagent:\/path\/to\/javaagent.jar -Dhazelcast.mc.jmx.enabled=true\\ -Dhazelcast.mc.jmx.port=9999 -jar mancenter-3.3.jar When Management Center starts, you should see the logs below. Started AppDynamics Java Agent Successfully. Hazelcast Management Center starting on port 8080 at path : \/mancenter","tags":"","url":"Clustered_JMX_via_Management_Center\/Integrating_with_AppDynamics.html"},{"title":"Clustered REST via Management Center","text":"Hazelcast IMDG Enterprise The Clustered REST API is exposed from Management Center to allow you to monitor clustered statistics of distributed objects. Enabling Clustered REST To enable Clustered REST on your Management Center, pass the following system property at startup. This property is disabled by default. -Dhazelcast.mc.rest.enabled=true Clustered REST API Root The entry point for Clustered REST API is \/rest\/. This resource does not have any attributes. Clusters Resource This resource returns a list of clusters that are connected to the Management Center. Retrieve Clusters Request Type: GET URL: \/rest\/clusters Request: curl http:\/\/localhost:8083\/mancenter\/rest\/clusters Response: 200 (application\/json) Body: [&quot;dev&quot;,&quot;qa&quot;] Cluster Resource This resource returns information related to the provided cluster name. Retrieve Cluster Information Request Type: GET URL: \/rest\/clusters\/{clustername} Request: curl http:\/\/localhost:8083\/mancenter\/rest\/clusters\/dev\/ Response: 200 (application\/json) Body: {&quot;masterAddress&quot;:&quot;192.168.2.78:5701&quot;} Members Resource This resource returns a list of members belonging to the provided clusters. Retrieve Members [GET] [\/rest\/clusters\/{clustername}\/members] Request Type: GET URL: \/rest\/clusters\/{clustername}\/members Request: curl http:\/\/localhost:8083\/mancenter\/rest\/clusters\/dev\/members Response: 200 (application\/json) Body: [&quot;192.168.2.78:5701&quot;,&quot;192.168.2.78:5702&quot;,&quot;192.168.2.78:5703&quot;,&quot;192.168.2.78:5704&quot;] Member Resource This resource returns information related to the provided member. Retrieve Member Information Request Type: GET URL: \/rest\/clusters\/{clustername}\/members\/{member} Request: curl http:\/\/localhost:8083\/mancenter\/rest\/clusters\/dev\/members\/192.168.2.78:5701 Response: 200 (application\/json) Body: { &quot;cluster&quot;:&quot;dev&quot;, &quot;name&quot;:&quot;192.168.2.78:5701&quot;, &quot;maxMemory&quot;:129957888, &quot;ownedPartitionCount&quot;:68, &quot;usedMemory&quot;:60688784, &quot;freeMemory&quot;:24311408, &quot;totalMemory&quot;:85000192, &quot;connectedClientCount&quot;:1, &quot;master&quot;:true } Retrieve Connection Manager Information Request Type: GET URL: \/rest\/clusters\/{clustername}\/members\/{member}\/connectionManager Request: curl http:\/\/localhost:8083\/mancenter\/rest\/clusters\/dev\/members\/192.168.2.78:5701\/connectionManager Response: 200 (application\/json) Body: { &quot;clientConnectionCount&quot;:2, &quot;activeConnectionCount&quot;:5, &quot;connectionCount&quot;:5 } Retrieve Operation Service Information Request Type: GET URL: \/rest\/clusters\/{clustername}\/members\/{member}\/operationService Request: curl http:\/\/localhost:8083\/mancenter\/rest\/clusters\/dev\/members\/192.168.2.78:5701\/operationService Response: 200 (application\/json) Body: { &quot;responseQueueSize&quot;:0, &quot;operationExecutorQueueSize&quot;:0, &quot;runningOperationsCount&quot;:0, &quot;remoteOperationCount&quot;:1, &quot;executedOperationCount&quot;:461139, &quot;operationThreadCount&quot;:8 } Retrieve Event Service Information Request Type: GET URL: \/rest\/clusters\/{clustername}\/members\/{member}\/eventService Request: curl http:\/\/localhost:8083\/mancenter\/rest\/clusters\/dev\/members\/192.168.2.78:5701\/eventService Response: 200 (application\/json) Body: { &quot;eventThreadCount&quot;:5, &quot;eventQueueCapacity&quot;:1000000, &quot;eventQueueSize&quot;:0 } Retrieve Partition Service Information Request Type: GET URL: \/rest\/clusters\/{clustername}\/members\/{member}\/partitionService Request: curl http:\/\/localhost:8083\/mancenter\/rest\/clusters\/dev\/members\/192.168.2.78:5701\/partitionService Response: 200 (application\/json) Body: { &quot;partitionCount&quot;:271, &quot;activePartitionCount&quot;:68 } Retrieve Proxy Service Information Request Type: GET URL: \/rest\/clusters\/{clustername}\/members\/{member}\/proxyService Request: curl http:\/\/localhost:8083\/mancenter\/rest\/clusters\/dev\/members\/192.168.2.78:5701\/proxyService Response: 200 (application\/json) Body: { &quot;proxyCount&quot;:8 } Retrieve All Managed Executors Request Type: GET URL: \/rest\/clusters\/{clustername}\/members\/{member}\/managedExecutors Request: curl http:\/\/localhost:8083\/mancenter\/rest\/clusters\/dev\/members\/192.168.2.78:5701\/managedExecutors Response: 200 (application\/json) Body: [&quot;hz:system&quot;,&quot;hz:scheduled&quot;,&quot;hz:client&quot;,&quot;hz:query&quot;,&quot;hz:io&quot;,&quot;hz:async&quot;] Retrieve a Managed Executor Request Type: GET URL: \/rest\/clusters\/{clustername}\/members\/{member}\/managedExecutors\/{managedExecutor} Request: curl http:\/\/localhost:8083\/mancenter\/rest\/clusters\/dev\/members\/192.168.2.78:5701 \/managedExecutors\/hz:system Response: 200 (application\/json) Body: { &quot;name&quot;:&quot;hz:system&quot;, &quot;queueSize&quot;:0, &quot;poolSize&quot;:0, &quot;remainingQueueCapacity&quot;:2147483647, &quot;maximumPoolSize&quot;:4, &quot;completedTaskCount&quot;:12, &quot;terminated&quot;:false } Client Endpoints Resource This resource returns a list of client endpoints belonging to the provided cluster. Please consider using the newly added Client Statistics Resource as it contains more detailed information about clients. Retrieve List of Client Endpoints Request Type: GET URL: \/rest\/clusters\/{clustername}\/clients Request: curl http:\/\/localhost:8083\/mancenter\/rest\/clusters\/dev\/clients Response: 200 (application\/json) Body: [&quot;192.168.2.78:61708&quot;] Retrieve Client Endpoint Information Request Type: GET URL: \/rest\/clusters\/{clustername}\/clients\/{client} Request: curl http:\/\/localhost:8083\/mancenter\/rest\/clusters\/dev\/clients\/192.168.2.78:61708 Response: 200 (application\/json) Body: { &quot;uuid&quot;:&quot;6fae7af6-7a7c-4fa5-b165-cde24cf070f5&quot;, &quot;address&quot;:&quot;192.168.2.78:61708&quot;, &quot;clientType&quot;:&quot;JAVA&quot; } Maps Resource This resource returns a list of maps belonging to the provided cluster. Retrieve List of Maps Request Type: GET URL: \/rest\/clusters\/{clustername}\/maps Request: curl http:\/\/localhost:8083\/mancenter\/rest\/clusters\/dev\/maps Response: 200 (application\/json) Body: [&quot;customers&quot;,&quot;orders&quot;] Retrieve Map Information Request Type: GET URL: \/rest\/clusters\/{clustername}\/maps\/{mapName} Request: curl http:\/\/localhost:8083\/mancenter\/rest\/clusters\/dev\/maps\/customers Response: 200 (application\/json) Body: { &quot;cluster&quot;:&quot;dev&quot;, &quot;name&quot;:&quot;customers&quot;, &quot;ownedEntryCount&quot;:1000, &quot;backupEntryCount&quot;:1000, &quot;ownedEntryMemoryCost&quot;:157890, &quot;backupEntryMemoryCost&quot;:113683, &quot;heapCost&quot;:297005, &quot;lockedEntryCount&quot;:0, &quot;dirtyEntryCount&quot;:0, &quot;hits&quot;:3001, &quot;lastAccessTime&quot;:1403608925777, &quot;lastUpdateTime&quot;:1403608925777, &quot;creationTime&quot;:1403602693388, &quot;putOperationCount&quot;:110630, &quot;getOperationCount&quot;:165945, &quot;removeOperationCount&quot;:55315, &quot;otherOperationCount&quot;:0, &quot;events&quot;:0, &quot;maxPutLatency&quot;:52, &quot;maxGetLatency&quot;:30, &quot;maxRemoveLatency&quot;:21 } MultiMaps Resource This resource returns a list of multimaps belonging to the provided cluster. Retrieve List of MultiMaps Request Type: GET URL: \/rest\/clusters\/{clustername}\/multimaps Request: curl http:\/\/localhost:8083\/mancenter\/rest\/clusters\/dev\/multimaps Response: 200 (application\/json) Body: [&quot;customerAddresses&quot;] Retrieve MultiMap Information Request Type: GET URL: \/rest\/clusters\/{clustername}\/multimaps\/{multimapname} Request: curl http:\/\/localhost:8083\/mancenter\/rest\/clusters\/dev\/multimaps\/customerAddresses Response: 200 (application\/json) Body: { &quot;cluster&quot;:&quot;dev&quot;, &quot;name&quot;:&quot;customerAddresses&quot;, &quot;ownedEntryCount&quot;:996, &quot;backupEntryCount&quot;:996, &quot;ownedEntryMemoryCost&quot;:0, &quot;backupEntryMemoryCost&quot;:0, &quot;heapCost&quot;:0, &quot;lockedEntryCount&quot;:0, &quot;dirtyEntryCount&quot;:0, &quot;hits&quot;:0, &quot;lastAccessTime&quot;:1403603095521, &quot;lastUpdateTime&quot;:1403603095521, &quot;creationTime&quot;:1403602694158, &quot;putOperationCount&quot;:166041, &quot;getOperationCount&quot;:110694, &quot;removeOperationCount&quot;:55347, &quot;otherOperationCount&quot;:0, &quot;events&quot;:0, &quot;maxPutLatency&quot;:77, &quot;maxGetLatency&quot;:69, &quot;maxRemoveLatency&quot;:42 } Queues Resource This resource returns a list of queues belonging to the provided cluster. Retrieve List of Queues Request Type: GET URL: \/rest\/clusters\/{clustername}\/queues Request: curl http:\/\/localhost:8083\/mancenter\/rest\/clusters\/dev\/queues Response: 200 (application\/json) Body: [&quot;messages&quot;] Retrieve Queue Information Request Type: GET URL: \/rest\/clusters\/{clustername}\/queues\/{queueName} Request: curl http:\/\/localhost:8083\/mancenter\/rest\/clusters\/dev\/queues\/messages Response: 200 (application\/json) Body: { &quot;cluster&quot;:&quot;dev&quot;, &quot;name&quot;:&quot;messages&quot;, &quot;ownedItemCount&quot;:55408, &quot;backupItemCount&quot;:55408, &quot;minAge&quot;:0, &quot;maxAge&quot;:0, &quot;aveAge&quot;:0, &quot;numberOfOffers&quot;:55408, &quot;numberOfRejectedOffers&quot;:0, &quot;numberOfPolls&quot;:0, &quot;numberOfEmptyPolls&quot;:0, &quot;numberOfOtherOperations&quot;:0, &quot;numberOfEvents&quot;:0, &quot;creationTime&quot;:1403602694196 } Topics Resource This resource returns a list of topics belonging to the provided cluster. Retrieve List of Topics Request Type: GET URL: \/rest\/clusters\/{clustername}\/topics Request: curl http:\/\/localhost:8083\/mancenter\/rest\/clusters\/dev\/topics Response: 200 (application\/json) Body: [&quot;news&quot;] Retrieve Topic Information Request Type: GET URL: \/rest\/clusters\/{clustername}\/topics\/{topicName} Request: curl http:\/\/localhost:8083\/mancenter\/rest\/clusters\/dev\/topics\/news Response: 200 (application\/json) Body: { &quot;cluster&quot;:&quot;dev&quot;, &quot;name&quot;:&quot;news&quot;, &quot;numberOfPublishes&quot;:56370, &quot;totalReceivedMessages&quot;:56370, &quot;creationTime&quot;:1403602693411 } Executors Resource This resource returns a list of executors belonging to the provided cluster. Retrieve List of Executors Request Type: GET URL: \/rest\/clusters\/{clustername}\/executors Request: curl http:\/\/localhost:8083\/mancenter\/rest\/clusters\/dev\/executors Response: 200 (application\/json) Body: [&quot;order-executor&quot;] Retrieve Executor Information [GET] [\/rest\/clusters\/{clustername}\/executors\/{executorName}] Request Type: GET URL: \/rest\/clusters\/{clustername}\/executors\/{executorName} Request: curl http:\/\/localhost:8083\/mancenter\/rest\/clusters\/dev\/executors\/order-executor Response: 200 (application\/json) Body: { &quot;cluster&quot;:&quot;dev&quot;, &quot;name&quot;:&quot;order-executor&quot;, &quot;creationTime&quot;:1403602694196, &quot;pendingTaskCount&quot;:0, &quot;startedTaskCount&quot;:1241, &quot;completedTaskCount&quot;:1241, &quot;cancelledTaskCount&quot;:0 } Client Statistics Resource This resource returns a list of clients belonging to the provided cluster. Retrieve List of Client UUIDs Request Type: GET URL: \/rest\/clusters\/{clustername}\/clientStats Request: curl http:\/\/localhost:8083\/mancenter\/rest\/clusters\/dev\/clientStats Response: 200 (application\/json) Body: [ &quot;f3b1e0e9-ea67-41b2-aba5-ea7480f02a93&quot;, &quot;cebf4dc9-852c-4605-a181-ffe1cca371a4&quot;, &quot;2371eed5-26e0-4470-92c1-41ea17110ef6&quot;, &quot;139990b3-fbc0-43a8-9c12-be53913333f7&quot;, &quot;d0364a1e-8665-46a8-af1d-be1af5580d07&quot;, &quot;7f337f8a-3538-4b5c-8ffc-9d4ae459e956&quot;, &quot;6ef9b6e5-5add-40d9-9319-ce502f55b5fc&quot;, &quot;fead3a99-19de-431c-9dd0-d6ecc4a4b9c8&quot;, &quot;e788e04e-2ded-4992-9d76-52c1973216e5&quot;, &quot;654fc9fb-c5c1-48a0-9b69-0c129fce860f&quot; ] Retrieve Detailed Client Statistics [GET] [\/rest\/clusters\/{clustername}\/clientStats\/{clientUuid}] Request Type: GET URL: \/rest\/clusters\/{clustername}\/clientStats\/{clientUuid} Request: curl http:\/\/localhost:8083\/mancenter\/rest\/clusters\/dev\/clientStats\/2371eed5-26e0-4470-92c1-41ea17110ef6 Response: 200 (application\/json) Body: { &quot;type&quot;: &quot;JAVA&quot;, &quot;name&quot;: &quot;hz.client_7&quot;, &quot;address&quot;: &quot;127.0.0.1:42733&quot;, &quot;clusterConnectionTimestamp&quot;: 1507874427419, &quot;enterprise&quot;: true, &quot;lastStatisticsCollectionTime&quot;: 1507881309434, &quot;osStats&quot;: { &quot;committedVirtualMemorySize&quot;: 12976173056, &quot;freePhysicalMemorySize&quot;: 3615662080, &quot;freeSwapSpaceSize&quot;: 8447324160, &quot;maxFileDescriptorCount&quot;: 1000000, &quot;openFileDescriptorCount&quot;: 191, &quot;processCpuTime&quot;: 252980000000, &quot;systemLoadAverage&quot;: 83.0, &quot;totalPhysicalMemorySize&quot;: 16756101120, &quot;totalSwapSpaceSize&quot;: 8447324160 }, &quot;runtimeStats&quot;: { &quot;availableProcessors&quot;: 12, &quot;freeMemory&quot;: 135665432, &quot;maxMemory&quot;: 3724541952, &quot;totalMemory&quot;: 361234432, &quot;uptime&quot;: 6894992, &quot;usedMemory&quot;: 225569000 }, &quot;nearCacheStats&quot;: { &quot;CACHE&quot;: { &quot;a-cache&quot;: { &quot;creationTime&quot;: 1507874429719, &quot;evictions&quot;: 0, &quot;hits&quot;: 0, &quot;misses&quot;: 50, &quot;ownedEntryCount&quot;: 0, &quot;expirations&quot;: 0, &quot;ownedEntryMemoryCost&quot;: 0, &quot;lastPersistenceDuration&quot;: 0, &quot;lastPersistenceKeyCount&quot;: 0, &quot;lastPersistenceTime&quot;: 0, &quot;lastPersistenceWrittenBytes&quot;: 0, &quot;lastPersistenceFailure&quot;: &quot;&quot; }, &quot;b.cache&quot;: { &quot;creationTime&quot;: 1507874429973, &quot;evictions&quot;: 0, &quot;hits&quot;: 0, &quot;misses&quot;: 50, &quot;ownedEntryCount&quot;: 0, &quot;expirations&quot;: 0, &quot;ownedEntryMemoryCost&quot;: 0, &quot;lastPersistenceDuration&quot;: 0, &quot;lastPersistenceKeyCount&quot;: 0, &quot;lastPersistenceTime&quot;: 0, &quot;lastPersistenceWrittenBytes&quot;: 0, &quot;lastPersistenceFailure&quot;: &quot;&quot; } }, &quot;MAP&quot;: { &quot;other,map&quot;: { &quot;creationTime&quot;: 1507874428638, &quot;evictions&quot;: 0, &quot;hits&quot;: 100, &quot;misses&quot;: 50, &quot;ownedEntryCount&quot;: 0, &quot;expirations&quot;: 0, &quot;ownedEntryMemoryCost&quot;: 0, &quot;lastPersistenceDuration&quot;: 0, &quot;lastPersistenceKeyCount&quot;: 0, &quot;lastPersistenceTime&quot;: 0, &quot;lastPersistenceWrittenBytes&quot;: 0, &quot;lastPersistenceFailure&quot;: &quot;&quot; }, &quot;employee-map&quot;: { &quot;creationTime&quot;: 1507874427959, &quot;evictions&quot;: 0, &quot;hits&quot;: 100, &quot;misses&quot;: 50, &quot;ownedEntryCount&quot;: 0, &quot;expirations&quot;: 0, &quot;ownedEntryMemoryCost&quot;: 0, &quot;lastPersistenceDuration&quot;: 0, &quot;lastPersistenceKeyCount&quot;: 0, &quot;lastPersistenceTime&quot;: 0, &quot;lastPersistenceWrittenBytes&quot;: 0, &quot;lastPersistenceFailure&quot;: &quot;&quot; } } }, &quot;userExecutorQueueSize&quot;: 0, &quot;memberConnection&quot;: &quot;ALL&quot;, &quot;version&quot;: &quot;UNKNOWN&quot; }","tags":"","url":"Clustered_REST_via_Management_Center.html"},{"title":"Management Center Documentation","text":"To see the Management Center documentation (this Reference Manual), click on the Documentation button located at the toolbar. Management Center manual will appear as a tab.","tags":"","url":"Management_Center_Documentation.html"},{"title":"Suggested Heap Size","text":"For 2 Cluster Members Mancenter Heap Size # of Maps # of Queues # of Topics 256m\u00c2\u00a0 3k 1k 1k 1024m 10k 1k 1k For 10 Members Mancenter Heap Size # of Maps # of Queues # of Topics 256m\u00c2\u00a0 50 30 30 1024m 2k 1k 1k For 20 Members Mancenter Heap Size # of Maps # of Queues # of Topics 256m*\u00c2\u00a0 N\/A N\/A N\/A 1024m 1k 1k 1k * With 256m heap, management center is unable to collect statistics.","tags":"","url":"Suggested_Heap_Size.html"}]}